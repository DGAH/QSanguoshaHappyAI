--[[	新版太阳神三国杀MOD之欢乐AI系统（独孤安河实验版）1v1专属扩展包部分]]----[[****************************************************************	武将：1v1·张辽（魏）]]--****************************************************************sgs.ai_chaofeng.kof_zhangliao = 4--[[	技能：突袭	描述：摸牌阶段，若你的手牌数小于对手的手牌数，你可以少摸一张牌并你获得对手的一张手牌。 ]]--sgs.ai_playerchosen_intention["koftuxi"] = function(self, source, target)	if sgs.getCamp(source) == "unknown" then		if sgs.getCamp(target) == "unknown" then			if source:aliveCount() >= 4 then				for _,lordname in ipairs(sgs.ai_lords) do					local lord = findPlayerByObjectName(self.room, lordname)					if lord and not lord:isKongcheng() then						if not self:doNotDiscard(lord, "h", true) then							sgs.updateIntention(source, lord, -35)							return						end					end				end			end		end	end	if source:getState() == "online" then		local can_update = true		if target:hasSkills("tuntian+zaoxian") then			can_update = false		elseif target:getHandcardNum() == 1 then			if self:hasSkills("kongcheng|zhiji|lianying", target) then				can_update = false			end		end		if can_update then			sgs.updateIntention(source, target, 80)		end	else		local intention = 80		local flag = "tuxi_isfriend_" .. target:objectName()		if source:hasFlag(flag) then			intention = -5		end		sgs.updateIntention(source, target, intention)	endendsgs.ai_skill_playerchosen["koftuxi"] = function(self, targets)	local card_str = sgs.ai_skill_use["@@tuxi"](self, "@tuxi")	if card_str:match("->") then		local target_str = cardstr:split("->")[2]:split("+")		if #target_str > 0 then			local target = findPlayerByObjectName(self.room, target_str[1])			return target		end	end	return nilend--[[****************************************************************	武将：1v1·许褚（魏）]]--****************************************************************--[[	技能：裸衣	描述：摸牌阶段，你可以少摸一张牌，若如此做，每当你于此回合内使用【杀】或【决斗】对目标角色造成伤害时，此伤害+1。 ]]----[[	技能：挟缠（限定技）	描述：出牌阶段，你可以与对手拼点：若你赢，视为你对对手使用一张【决斗】；若你没赢，视为对手对你使用一张【决斗】。 ]]----[[	内容：注册“挟缠技能卡”]]--sgs.RegistCard("XiechanCard")--[[	内容：“挟缠”技能信息]]--sgs.ai_skills["xiechan"] = {	name = "xiechan",	dummyCard = function(self)		return sgs.Card_Parse("@XiechanCard=.")	end,	enabled = function(self, handcards)		if self.player:getMark("@twine") > 0 then			return not self.player:isKongcheng() 		end		return false	end,}--[[	内容：“挟缠技能卡”的具体使用方式]]--sgs.ai_skill_use_func["XiechanCard"] = function(self, card, use)	local enemies = {}	if not self.player:isLocked(sgs.duel) then		for _,enemy in ipairs(self.opponents) do			if not enemy:isKongcheng() then				if not enemy:hasSkill("kongcheng") or enemy:getHandcardNum() > 1 then					if self:trickIsEffective(sgs.duel, enemy, self.player) then						table.insert(enemies, enemy)					end				end			end		end	end	if #enemies > 0 then		self:sort(enemies, "defense")		local my_max_card = self:getMaxPointCard()		if my_max_card then			local my_max_point = my_max_card:getNumber()			local target = nil			for _,enemy in ipairs(enemies) do				local max_card = self:getMaxPointCard(enemy)				if max_card then					local max_point = max_card:getNumber()					local can_use = false					if max_point < my_max_point then						can_use = true					elseif my_max_point > 10 then						can_use = true					end					if can_use then						local mySlashCount = self:getCardsNum("Slash")						if sgs.isCard("Slash", my_max_card, self.player) then							mySlashCount = mySlashCount - 1						end						local slashCount = sgs.getCardsNum("Slash", enemy)						if slashCount <= mySlashCount then							target = enemy							break						end					end				end			end			if target then				use.card = card				if use.to then					use.to:append(target)				end			end		end	endend--[[	套路：仅使用“挟缠技能卡”]]--sgs.ai_series["XiechanCardOnly"] = {	name = "XiechanCardOnly",	IQ = 2,	value = 3,	priority = 4,	cards = {		["XiechanCard"] = 1,		["Others"] = 1,	},	enabled = function(self)		return true	end,	action = function(self, handcards, skillcards)		local xiechan_skill = sgs.ai_skills["xiechan"]		local dummyCard = xiechan_skill["dummyCard"](self)		return {dummyCard}	end,	break_condition = function(self)		return false	end,}table.insert(sgs.ai_card_actions["XiechanCard"], "XiechanCardOnly")--[[****************************************************************	武将：1v1·甄姬（魏）]]--****************************************************************--[[	技能：倾国	描述：你可以将一张装备区的装备牌当【闪】使用或打出。 ]]--sgs.ai_view_as["kofqingguo"] = function(card, player, place)	if place == sgs.Player_PlaceEquip then		local suit = card:getSuitString()		local number = card:getNumberString()		local card_id = card:getEffectiveId()		return ("jink:kofqingguo[%s:%s]=%d"):format(suit, number, card_id)	endend--[[	内容：“倾国”卡牌需求]]--sgs.card_need_system["kofqingguo"] = function(self, card, player)	if card:isKindOf("Weapon") then 		return not to:getWeapon()	elseif card:isKindOf("Armor") then 		return not to:getArmor()	elseif card:isKindOf("OffensiveHorse") then 		return not to:getOffensiveHorse()	elseif card:isKindOf("DefensiveHorse") then 		return not to:getDefensiveHorse()	end	return falseend--[[	内容：“倾国”统计信息]]--sgs.card_count_system["kofqingguo"] = {	name = "kofqingguo",	pattern = "Jink",	ratio = 0.65,	statistics_func = function(class_name, player, data)		if player:hasSkill("kofqingguo") then			local count = data["count"]			count = count + data["unknown"] * 0.65			local equips = player:getCards("e")			count = count + equips:length()			return count		end	end}--[[	技能：洛神	描述：准备阶段开始时，你可以进行一次判定，若判定结果为黑色，你获得生效后的判定牌且你可以重复此流程。 ]]----[[****************************************************************	武将：1v1·夏侯渊（魏）]]--****************************************************************--[[	技能：神速	描述：你可以选择一至两项：1.跳过你的判定阶段和摸牌阶段。2.跳过你的出牌阶段并弃置一张装备牌。你每选择一项，视为使用一张【杀】（无距离限制）。 ]]----[[	技能：肃资	描述：每当已死亡的对手的牌因弃置而置入弃牌堆前，你可以获得之。 ]]--sgs.ai_skill_invoke["suzi"] = true--[[****************************************************************	武将：1v1·关羽（蜀）]]--****************************************************************--[[	技能：武圣	描述：你可以将一张红色牌当【杀】使用或打出。 ]]----[[	技能：虎威	描述：你登场时，你可以视为使用一张【水淹七军】。 ]]--sgs.ai_skill_invoke["huwei"] = function(self, data)	return trueend--[[****************************************************************	武将：1v1·马超（蜀）]]--****************************************************************--[[	技能：铁骑	描述：每当你指定【杀】的目标后，你可以进行一次判定，若判定结果为红色，该角色不能使用【闪】对此【杀】进行响应。 ]]----[[	技能：骁袭	描述：你登场时，你可以视为使用一张【杀】。 ]]--sgs.ai_skill_invoke["xiaoxi"] = function(self, data)	return trueend--[[****************************************************************	武将：1v1·黄月英（蜀）]]--****************************************************************--[[	技能：集智	描述：每当你使用非延时类锦囊牌选择目标后，你可以摸一张牌。 ]]----[[	技能：藏机	描述：你死亡时，你可以将装备区的所有装备牌移出游戏：若如此做，你的下个武将登场时，将这些牌置于装备区。 ]]--sgs.ai_skill_invoke["cangji"] = truesgs.ai_skill_use["@@cangji"] = function(self, prompt, method)	return "."end--[[****************************************************************	武将：1v1·黄忠（蜀）]]--****************************************************************--[[	技能：烈弓	描述：每当你于出牌阶段内使用【杀】指定对手为目标后，若对手的手牌数大于或等于你的体力值，你可以令该角色不能使用【闪】对此【杀】进行响应。 ]]--sgs.ai_skill_invoke["kofliegong"] = sgs.ai_skill_invoke["liegong"]--[[	内容：“烈弓”卡牌需求]]--sgs.card_need_system["kofliegong"] = function(self, card, player)	if sgs.isCard("Slash", card, player) then		return sgs.getKnownCard(player, "Slash", true) == 0	end	return falseend--[[****************************************************************	武将：1v1·姜维（蜀）]]--****************************************************************--[[	技能：挑衅	描述：出牌阶段限一次，你可以选择一名攻击范围内含有你的其他角色，该角色需对你使用一张【杀】，否则你弃置其一张牌。 ]]----[[****************************************************************	武将：1v1·孟获（蜀）]]--****************************************************************--[[	技能：蛮裔	描述：你登场时，你可以视为使用一张【南蛮入侵】。锁定技，【南蛮入侵】对你无效。 ]]--sgs.ai_skill_invoke["manyi"] = true--[[	技能：再起	描述：摸牌阶段开始时，若你已受伤，你可以放弃摸牌，改为从牌堆顶亮出X张牌（X为你已损失的体力值），你回复等同于其中♥牌数量的体力，然后将这些♥牌置入弃牌堆，最后获得其余的牌。 ]]----[[****************************************************************	武将：1v1·祝融（蜀）]]--****************************************************************--[[	技能：蛮裔	描述：你登场时，你可以视为使用一张【南蛮入侵】。锁定技，【南蛮入侵】对你无效。 ]]----[[	技能：烈刃	描述：每当你使用【杀】对目标角色造成一次伤害后，你可以与该角色拼点：若你赢，你获得其一张牌。 ]]----[[****************************************************************	武将：1v1·孙尚香（吴）]]--****************************************************************--[[	技能：姻礼	描述：对手的回合内，其拥有的装备牌以未经转化的方式置入弃牌堆时，你可以获得之。 ]]--sgs.ai_skill_invoke["yinli"] = function(self, data)	return not self:needKongcheng(self.player, true)endsgs.ai_skill_askforag["yinli"] = function(self, card_ids)	if self:needKongcheng(self.player, true) then 		return card_ids[1] 	else 		return -1 	endend--[[	技能：枭姬	描述：每当你失去一张装备区的装备牌后，你可以选择一项：摸两张牌，或回复1点体力。 ]]--sgs.ai_skill_choice["kofxiaoji"] = function(self, choices)	if choices:match("recover") then 		return "recover" 	else 		return "draw" 	endend--[[****************************************************************	武将：1v1·貂蝉（群）]]--****************************************************************--[[	技能：翩仪（锁定技）	描述：你登场时，若处于对手的回合，当前回合结束。 ]]----[[	技能：闭月	描述：结束阶段开始时，你可以摸一张牌。 ]]----[[****************************************************************	武将：1v1·何进（群）]]--****************************************************************--[[	技能：谋诛	描述：出牌阶段限一次，你可以令对手交给你一张手牌，然后若你的手牌数大于对手的手牌数，对手选择一项：视为对你使用一张【杀】，或视为对你使用一张【决斗】。 ]]----[[	内容：“谋诛技能卡”的卡牌成分]]--sgs.card_constituent["MouzhuCard"] = {	use_priority = 2.5,}--[[	内容：“谋诛技能卡”的卡牌仇恨值]]--sgs.ai_card_intention["MouzhuCard"] = function(self, card, source, targets)	if not self.player:hasSkill("leiji") then 		sgs.updateIntention(source, targets[1], 30) 	endend--[[	内容：注册“谋诛技能卡”]]--sgs.RegistCard("MouzhuCard")--[[	内容：“谋诛”技能信息]]--sgs.ai_skills["mouzhu"] = {	name = "mouzhu",	dummyCard = function(self)		return sgs.Card_Parse("@MouzhuCard=.")	end,	enabled = function(self, handcards)		if self.player:hasUsed("MouzhuCard") then 			return false		end		return true	end,}--[[	内容：“谋诛技能卡”的具体使用方式]]--sgs.ai_skill_use_func["MouzhuCard"] = function(self, card, use)	local canLeiji = false	if self.player:hasSkill("leiji") then		if self:findLeijiTarget(self.player, 51) then			if self:hasSuit("spade", true) then				canLeiji = true				self:sort(self.partners_noself, "handcard")				sgs.reverse(self.partners_noself)				local jinkCount = self:getCardsNum("Jink")				local jinkFlag = ( jinkCount > 0 )				local isHealthy = not self:isWeak()				local armorEffect = self:hasEightDiagramEffect()				local armorFlag = isHealthy and armorEffect				for _, friend in ipairs(self.partners_noself) do					if not friend:isKongcheng() then						if friend:getHandcardNum() < self.player:getHandcardNum() + 2 then							if jinkFlag then								use.card = card								if use.to then 									use.to:append(friend) 								end								return							elseif armorFlag then								if not IgnoreArmor(friend, self.player) then									use.card = card									if use.to then 										use.to:append(friend) 									end									return								end							end						end					end				end			end		end	end	for _, enemy in ipairs(self.opponents) do			if enemy:getHandcardNum() > 0 then			if self:invokeDamagedEffect(self.player, enemy) then				use.card = card				if use.to then 					use.to:append(enemy) 				end				return			elseif self:needToLoseHp(self.player, enemy) then				use.card = card				if use.to then 					use.to:append(enemy) 				end				return			end		end	end	local first, second, third, fourth	local myslash = self:getCard("Slash")	local slashCount = self:getCardsNum("Slash")	for _, enemy in ipairs(self.opponents) do		if enemy:getHandcardNum() >= self.player:getHandcardNum() + 2 then			first = enemy			break		elseif enemy:getHandcardNum() > 0 then			local flag = false			if not second then				if slashCount > sgs.getCardsNum("Slash", enemy) then					if not self:slashIsEffective(sgs.slash, self.player, nil, enemy) then						second = enemy						flag = true					end				end			end			if not flag then				if not self:hasSkills("wushuang|mengjin|tieji", enemy) then					local flag = true					if enemy:getGender() ~= self.player:getGender() then						if enemy:hasSkill("roulin") then							flag = false						elseif enemy:hasWeapon("DoubleSword") then							flag = false						end					end					if flag then						flag = false						if myslash then							if not third then								if enemy:getHandcardNum() == 1 then									if self.player:inMyAttackRange(enemy) then										if not self:needKongcheng(enemy) then											local isHeavy = false											if self:hasHeavySlashDamage(self.player, myslash, enemy) then												isHeavy = true											elseif self.player:hasWeapon("GudingBlade") then												isHeavy = true											end											if isHeavy then												if not self:isWeak() then													third = enemy													flag = true												else													local peachCount = self:getCardsNum("Peach")													local analCount = self:getCardsNum("Analeptic")													if peachCount + analCount > 0 then														third = enemy														flag = true													end												end											end										end									end								end							end						end						if not flag then							if not fourth then								if self:getCardsNum("Jink") > 0 then									if slashCount > sgs.getCardsNum("Slash", enemy) then										fourth = enemy									end								end							end						end					end				end			end		end	end	local target = nil	if canLeiji then		target = fourth and third or first or second	else		target = first or second or third or fourth	end	if target then		use.card = card		if use.to then 			use.to:append(target) 		end	endendsgs.ai_skill_cardask["@mouzhu-give"] = function(self, data)	local target = self.room:getCurrent()	local handcards = self.player:getHandcards()	local cards = sgs.QList2Table(handcards)	self:sortByKeepValue(cards)	if self:isPartner(target) then		if target:hasSkill("leiji") then			local jink, spade			for _, c in ipairs(cards) do				if sgs.isCard("Jink", c, target) then 					jink = c:getEffectiveId() 				end				if c:getSuit() == sgs.Card_Spade then 					spade = c:getEffectiveId() 				end			end			if jink then				if self:hasSuit("spade", true, target) then					return jink				elseif not self:hasEightDiagramEffect(target) then					return jink				end			end			if spade or jink then 				return spade or jink			end		end	else		if target:hasSkill("leiji") then			for _, c in ipairs(cards) do				if not sgs.isKindOf("Peach|Jink", c) then					if c:getSuit() ~= sgs.Card_Spade then						return c:getEffectiveId()					end				end			end		end		for _, c in ipairs(cards) do			if not c:isKindOf("Peach") then 				return c:getEffectiveId() 			end		end	end	return cards[1]:getEffectiveId()endsgs.ai_skill_choice["mouzhu"] = function(self, choices)	local target = self.room:getCurrent()	if target:hasSkill("leiji") then		if self:isPartner(target) then			if choices:match("slash") then 				return "slash" 			end		else			if choices:match("duel") then 				return "duel" 			end		end	end	if self:isPartner(target) then		if choices:match("slash") then			if target:hasSkill("leiji") then				return "slash"			elseif not self:slashIsEffective(sgs.slash, target) then 				return "slash" 			end		end		if self:invokeDamagedEffect(self.player, target) then			if sgs.getCardsNum("Slash", target) >= 1 then				if choices:match("duel") then 					return "duel" 				end			end		end	else		if choices:match("duel") then 			if target:hasSkill("leiji") then				return "duel" 			end			if self:getCardsNum("Slash") > sgs.getCardsNum("Slash", target) then				return "duel" 			end		end	end	if choices:match("slash") then 		return "slash" 	else 		return "duel" 	endend--[[	套路：仅使用“谋诛技能卡”]]--sgs.ai_series["MouzhuCardOnly"] = {	name = "MouzhuCardOnly",	IQ = 2,	value = 3,	priority = 2,	skills = "mouzhu",	cards = {		["MouzhuCard"] = 1,		["Others"] = 0,	},	enabled = function(self)		return true	end,	action = function(self, handcards, skillcards)		local mouzhu_skill = sgs.ai_skills["mouzhu"]		local dummyCard = mouzhu_skill["dummyCard"](self)		return {dummyCard}	end,	break_condition = function(self)		return false	end,}table.insert(sgs.ai_card_actions["MouzhuCard"], "MouzhuCardOnly")--[[	技能：延祸	描述：你死亡时，你可以依次弃置对手的X张牌。（X为你死亡时的牌数） ]]--sgs.ai_skill_invoke["yanhuo"] = function(self, data)	local others = self.room:getOtherPlayers(self.player)	for _,enemy in sgs.qlist(others) do		if self:isOpponent(enemy) then			if not enemy:isNude() then				if enemy:isAlive() then					if not self:doNotDiscard(enemy) then						return true					end				end			end		end	end	return falseendsgs.ai_skill_playerchosen["yanhuo"] = function(self, targets)	local target = self:findPlayerToDiscard(nil, nil, nil, targets)	if target then		if target:objectName() ~= self.player:objectName() then 			return target 		end	endend