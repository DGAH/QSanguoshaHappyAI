--[[	新版太阳神三国杀MOD之欢乐AI系统（独孤安河实验版）3v3专属扩展包部分]]----[[****************************************************************	卡牌部分]]--****************************************************************sgs.ai_skill_choice["3v3_direction"] = function(self, choices, data)	local card = data:toCard()	local aggressive = false	if card and card:isKindOf("AOE") then		aggressive = true	end	local nextAlive = self.player:getNextAlive()	if self:isFriend(nextAlive) == aggressive then 		return "cw" 	else 		return "ccw" 	endend--[[****************************************************************	武将部分]]--****************************************************************--[[****************************************************************	武将：3v3·诸葛瑾（吴）]]--****************************************************************--[[	技能：弘援	描述：摸牌阶段，你可以少摸一张牌，令其他己方角色各摸一张牌。 ]]----[[	内容：“弘援技能卡”的卡牌仇恨值]]--sgs.ai_card_intention["HongyuanCard"] = -70sgs.ai_skill_invoke["hongyuan"] = function(self, data)	local count = 0	for i = 1, #self.partners_noself, 1 do		if not self:needKongcheng(self.partners_noself[i], true) then			if not self.partners_noself[i]:hasSkill("manjuan") then				count = count + 1			end		end		if count == 2 then 			return true 		end	end	return falseendsgs.ai_skill_use["@@hongyuan"] = function(self, prompt)	if self:needBear() then 		return "." 	end	self:sort(self.partners_noself, "handcard")	local first_index, second_index	for i = 1, #self.partners_noself, 1 do		local friend = self.partners_noself[i]		local flag = true		if friend:hasSkill("manjuan") then			flag = false		elseif self:needKongcheng(friend) then			if friend:getHandcardNum() == 0 then				flag = false			end		end		if flag then			if first_index then				second_index = i			else				first_index = i			end		end		if second_index then 			break 		end	end	if first_index and not second_index then		local others = self.room:getOtherPlayers(self.player)		local first = self.partners_noself[first_index]		for _, other in sgs.qlist(others) do			local flag = false			if not self:isPartner(other) then				if first:objectName() ~= other:objectName() then					if other:hasSkill("manjuan") then						flag = true					elseif self:needKongcheng(other) then						if other:getHandcardNum() == 0 then							flag = true						end					end				end			end			if flag then				return ("@HongyuanCard=.->%s+%s"):format(first:objectName(), other:objectName())			end		end	end	if second_index then		local first = self.partners_noself[first_index]:objectName()		local second = self.partners_noself[second_index]:objectName()		return ("@HongyuanCard=.->%s+%s"):format(first, second)	end	return "."endsgs.draw_cards_system["hongyuan"] = {	name = "hongyuan",	correct_func = function(self, player)		return -1	end,}--[[	技能：缓释	描述：每当己方角色的判定牌生效前，你可以打出一张牌代替之。 ]]--sgs.ai_skill_invoke["huanshi"] = truesgs.ai_skill_choice["huanshi"] = function(self, choices)	local zhugejin = self.room:findPlayerBySkillName("huanshi")	if zhugejin then		if self:isEnemy(zhugejin) then 			return "reject" 		end	end	return "accept"endsgs.ai_skill_cardask["@huanshi-card"] = function(self, data)	local judge = data:toJudge()	if self:needRetrial(judge) then		local cards = self.player:getCards("he")		cards = sgs.QList2Table(cards)		local card_id = self:getRetrialCardId(cards, judge)		if card_id ~= -1 then			return "$" .. card_id		end	end	return "."endsgs.ai_wizard_system["huanshi"] = {	name = "huanshi",	skill = "huanshi",	retrial_enabled = function(self, source, target)		if source:hasSkill("huanshi") then			if not source:isNude() then				if source:objectName() == target:objectName() then					return true				elseif self:isFriend(target, source) then					return true				end			end		end		return false	end,}sgs.huanshi_suit_value = {	heart = 3.9,	diamond = 3.4,	club = 3.9,	spade = 3.5}--[[	内容：“缓释”卡牌需求]]--sgs.card_need_system["huanshi"] = function(self, card, player)	if self:getFinalRetrial(player) == 1 then		local suit = card:getSuit()		for _,friend in ipairs(self.partners) do			if suit == sgs.Card_Club then				if self:willSkipDrawPhase(friend) then					return true --not self:hasSuit("club", true, player)				end			elseif suit == sgs.Card_Heart then				if self:willSkipPlayPhase(friend) then					return true --not self:hasSuit("heart", true, player)				end			end		end	end	return falseend--[[	技能：明哲	描述：你的回合外，每当你的一张红色牌因使用、打出或弃置而进入弃牌堆后，你可以摸一张牌。 ]]--sgs.mingzhe_suit_value = {	heart = 4.0,	diamond = 4.0}--[[	内容：“明哲”卡牌需求]]--sgs.card_need_system["mingzhe"] = function(self, card, player)	if card:isRed() then		return sgs.getKnownCard(player, "red", false) < 2	end	return falseend--[[****************************************************************	武将：3v3·夏侯惇（魏）]]--****************************************************************--[[	技能：刚烈	描述：每当你受到伤害后，你可以选择一名对方角色并进行一次判定，若判定结果不为♥，则该角色选择一项：弃置两张手牌，或受到你造成的1点伤害。 ]]--sgs.ai_playerchosen_intention["vsganglie"] = function(self, source, target)	if sgs.ai_ganglie_effect then		local flag = string.format("%s_%s_%d", source:objectName(), target:objectName(), sgs.turncount)		if sgs.ai_ganglie_effect == flag then			sgs.updateIntention(source, target, -10)			return 		end	end	if source:getState() == "online" then		if not source:hasSkill("jueqing") then			if self:invokeDamagedEffect(target, source) then 				return 			end		end		sgs.updateIntention(source, target, 40)	else		sgs.updateIntention(source, target, 80)	endendsgs.ai_skill_playerchosen.vsganglie = function(self, targets)	self:sort(self.enemies)	local prior_enemies = {}	for _, enemy in ipairs(self.enemies) do		if enemy:getHandcardNum() < 2 then 			table.insert(prior_enemies, enemy) 		end	end	for _, enemy in ipairs(prior_enemies) do		if self:canAttack(enemy) then 			return enemy 		end	end	for _, enemy in ipairs(self.enemies) do		if self:canAttack(enemy) then			return enemy		elseif enemy:getHandcardNum() > 3 then 			return enemy 		end	end	if sgs.current_mode == "06_3v3" then		return nil	elseif sgs.current_mode == "06_xmode" then 		return nil 	end	local myname = self.player:objectName()	for _, friend in ipairs(self.friends_noself) do		if self:damageIsEffective(friend, sgs.DamageStruct_Normal, friend) then			if not self:cannotBeHurt(friend) then				if self:invokeDamagedEffect(damage.from, self.player) then					local name = friend:objectName()					sgs.ai_ganglie_effect = string.format("%s_%s_%d", myname, name, sgs.turncount)					return friend				end			end		end	end	return nilendsgs.slash_prohibit_system["vsganglie"] = {	name = "vsganglie",	reason = "vsganglie",	judge_func = function(self, target, source, slash)		--友方		if self:isFriend(source, target) then 			return false 		end		--绝情		if source:hasSkill("jueqing") then			return false		end		--原版潜袭		if source:hasSkill("nosqianxi") then			if source:distanceTo(target) == 1 then 				return false 			end		end		--原版解烦		if source:hasFlag("NosJiefanUsed") then 			return false 		end		--刚烈		local enemies = self:getOpponents(source)		if #enemies > 1 then			local friends = self:getPartners(source)			for _,p in ipairs(friends) do				local num = p:getHandcardNum()				local hp = p:getHp()				if num + hp < 4 then					return true				end			end		end		return false	end}sgs.ai_damage_requirement["vsganglie"] = function(self, source, target)	for _, enemy in ipairs(self.enemies) do		if self:isEnemy(enemy, target) then			if enemy:getHp() + enemy:getHandcardNum() <= 3 then				if sgs.isGoodTarget(self, enemy, self.enemies) then					local skills = sgs.need_kongcheng .. "|buqu" 					if not self:hasSkills(skills, enemy) then						return true					elseif source:getHandcardNum() <= 1 then						return true					end				end			end		end	end	return falseend--[[****************************************************************	武将：3v3·关羽（蜀）]]--****************************************************************--[[	技能：武圣	描述：你可以将一张红色牌当【杀】使用或打出。 ]]----[[	技能：忠义（限定技）	描述：出牌阶段，你可以将一张红色手牌置于武将牌上。若你有“忠义”牌，己方角色使用的【杀】对目标角色造成伤害时，此伤害+1。身份牌重置后，你将“忠义”牌置入弃牌堆。 ]]----[[	内容：“忠义技能卡”的卡牌成分]]--sgs.card_constituent["ZhongyiCard"] = {	use_priority = 10,}--[[	内容：注册“忠义技能卡”]]--sgs.RegistCard("ZhongyiCard")--[[	内容：“忠义”技能信息]]--sgs.ai_skills["zhongyi"] = {	name = "zhongyi",	dummyCard = function(self)		return sgs.Card_Parse("@ZhongyiCard=.")	end,	enabled = function(self, handcards)		if self.player:getMark("@loyal") > 0 then			if not self.player:isKongcheng() then				for _,red in ipairs(handcards) do					if red:isRed() then						return true					end				end			end		end		return false	end,}--[[	内容：“忠义技能卡”的具体使用方式]]--sgs.ai_skill_use_func["ZhongyiCard"] = function(self, card, use)	if sgs.turncount > 1 then		local handcards = self.player:getHandcards()		local cards = sgs.QList2Table(handcards)		local red_card		self:sortByUseValue(cards, true)		for _,red in ipairs(cards) do			if card:isRed() then				if not sgs.isCard("Peach", red, self.player) then					if not sgs.isCard("ExNihilo", red, self.player) then						red_card = c						break					end				end			end		end		if red_card then			local value = 0			local friends = {}			if sgs.current_mode == "06_3v3" then				for _, friend in ipairs(self.friends) do					if not friend:hasFlag("actioned") then 						table.insert(friends, friend) 					end				end			else				friends = self.friends			end			self:sort(self.enemies, "defense")			for _,friend in ipairs(friends) do				local local_value = 0				for _,enemy in ipairs(self.enemies) do					if friend:canSlash(enemy) then						if not self:slashIsProhibited(enemy, friend, sgs.slash) then							if self:slashIsEffective(slash, enemy) then								if sgs.isGoodTarget(self, enemy, self.enemies) then									local_value = local_value + 0.8									if sgs.getCardsNum("Jink", enemy) < 1 then 										local_value = local_value + 0.5 									end									local flag = false									if friend:hasSkill("tieji") then										flag = true									elseif friend:hasSkill("liegong") then										if enemy:getHandcardNum() <= friend:getAttackRange() then											flag = true										elseif enemy:getHandcardNum() >= friend:getHp() then											flag = true										end									elseif friend:hasSkill("kofliegong") then										if enemy:getHandcardNum() >= friend:getHp() then											flag = true										end									end									if flag then										local_value = local_value + 0.5									end									break								end							end						end					end				end				local slashCount = sgs.getCardsNum("Slash", friend)				if slashCount < 1 then 					local_value = local_value * 0.3				elseif self:hasCrossbowEffect(friend) then 					local_value = local_value * slashCount 				end				if friend:hasSkill("shensu") and not self:isWeak(friend) then 					local_value = local_value * 1.2				elseif self:willSkipPlayPhase(friend) then 					local_value = local_value * 0.2 				end				value = value + local_value			end			local ratio = value / #self.enemies			if ratio > 0.85 then 				local card_str = "@ZhongyiCard=" .. red_card:getEffectiveId()				use.card = sgs.Card_Parse(card_str)			end		end	endendsgs.ai_skill_invoke["zhongyi"] = function(self, data)	local damage = data:toDamage()	local target = damage.to	return self:isEnemy(target)endsgs.heavy_slash_system["zhongyi"] = {	name = "zhongyi",	reason = "zhongyi",	extra_func = function(source, slash, target, isFireSlash, isThunderSlash)		local guanyu = global_room:findPlayerBySkillName("zhongyi")		if guanyu then			local loyals = guanyu:getPile("loyal")			if loyals:length() > 0 then				if not source:hasSkill("jueqing") then					if sgs.ai_camp[source:objectName()] == sgs.ai_camp[guanyu:objectName()] then						return 1					end				end			end		end		return 0	end,}--[[	套路：仅使用“忠义技能卡”]]--sgs.ai_series["ZhongyiCardOnly"] = {	name = "ZhongyiCardOnly",	IQ = 2,	value = 3,	priority = 5,	skills = "zhongyi",	cards = {		["ZhongyiCard"] = 1,		["Others"] = 1,	},	enabled = function(self)		return true	end,	action = function(self, handcards, skillcards)		local zhongyi_skill = sgs.ai_skills["zhongyi"]		local dummyCard = zhongyi_skill["dummyCard"](self)		return {dummyCard}	end,	break_condition = function(self)		return false	end,}table.insert(sgs.ai_card_actions["ZhongyiCard"], "ZhongyiCardOnly")--[[****************************************************************	武将：3v3·赵云（蜀）]]--****************************************************************--[[	技能：龙胆	描述：你可以将一张【杀】当【闪】使用或打出，或将一张【闪】当【杀】使用或打出。 ]]----[[	技能：救主	描述：每当一名其他己方角色处于濒死状态时，若你的体力值大于1，你可以失去1点体力并弃置一张牌，令该角色回复1点体力。 ]]----[[	内容：“救主技能卡”的卡牌仇恨值]]--sgs.ai_card_intention["JiuzhuCard"] = sgs.ai_card_intention["Peach"]sgs.ai_cardsview["jiuzhu"] = function(self, class_name, player)	if class_name == "Peach" then		if player:getHp() > 1 then			if not player:isNude() then				local dying = self.room:getCurrentDyingPlayer()				if dying then					local must_save = false					if sgs.current_mode == "06_xmode" then						if not self:isFriend(dying) then							return 						end					elseif sgs.current_mode == "06_3v3" then						if self:isFriend(dying) then							if self:mayLord(dying) then								must_save = true							end						else							return 						end					end					if not must_save then						if self:mayLord(dying) then							if self:amLoyalist() then								must_save = true							elseif self:amRenegade() then								if self.room:alivePlayerCount() > 2 then									must_save = true								end							end						end					end					if not must_save then						if not self.player:hasArmorEffect("SilverLion") then 							if self:isWeak() then								return 							end						end					end					local to_discard = self:askForDiscard(player, "dummyreason", 1, 1, false, true)					if #to_discard == 1 then 						return "@JiuzhuCard=" .. to_discard[1] .. "->." 					end				end			end		end	endend--[[	内容：“救主”统计信息]]--sgs.card_count_system["jiuzhu"] = {	name = "jiuzhu",	pattern = "Peach",	ratio = 1,	statistics_func = function(class_name, player, data)		if player:hasSkill("jiuzhu") then			local count = data["count"]			local hp = player:getHp() - 1			local cardcount = player:getCardCount(true)			local num = math.min(cardcount, hp)			num = math.max(0, num)			count = math.max(count, num)			return count		end	end}--[[****************************************************************	武将：3v3·吕布（群）]]--****************************************************************--[[	技能：无双（锁定技）	描述：每当你使用【杀】指定一名目标角色后，其需依次使用两张【闪】才能抵消。每当你使用【决斗】指定一名目标角色后，或成为一名角色使用【决斗】的目标后，其每次进行响应需依次打出两张【杀】。 ]]----[[	技能：战神（觉醒技）	描述：准备阶段开始时，若你已受伤且有己方角色已死亡，你减1点体力上限，弃置装备区的武器牌，然后获得技能“马术”和“神戟”。 ]]--sgs.ai_skill_invoke["zhanshen"] = function(self, data)	local obj = data:toString():split(":")[2]	local lvbu = findPlayerByObjectName(self.room, obj)	return self:isFriend(lvbu)end--[[****************************************************************	武将：3v3·文聘（魏）]]--****************************************************************--[[	技能：镇卫（锁定技）	描述：对方角色与其他己方角色的距离+1。 ]]----[[	内容：“镇卫技能卡”的卡牌仇恨值]]--sgs.ai_card_intention["ZhenweiCard"] = function(self, card, source, targets)	local friends = self:getFriends(source, nil, true)	if #friends > 0 then		for _,target in ipairs(targets) do			sgs.updateIntention(source, target, -50)		end	endendsgs.ai_skill_use["@@zhenwei"] = function(self, prompt)	local mode = self.room:getMode()	local playerCount = sgs.Sanguosha:getPlayerCount(mode)	local total = math.floor(playerCount / 2) - 1	if total > 0 then 		local targets = {}		if #self.friends_noself > 0 then			self:sort(self.friends_noself, "defense")			for _, friend in ipairs(self.friends_noself) do				table.insert(targets, friend:objectName())				if #targets == total then 					break 				end			end		elseif #self.enemies > 0 then			if sgs.turncount >= 2 then				self:sort(self.enemies, "defense")				for _, enemy in ipairs(self.enemies) do					table.insert(targets, enemy:objectName())					if #targets == total then 						break 					end				end			end		end		if #targets > 0 then 			local card_str = "@ZhenweiCard=.->" .. table.concat(targets, "+")			return card_str		end	end	return "."end